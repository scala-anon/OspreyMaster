//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.

syntax = "proto3";

package dp.service.annotation;

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.annotation";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * Annotation Service Interface
 *
 * Interface for annotating archived data.
 */
service DpAnnotationService {

  /*
   * createDataSet: Create a DataSet.
   *
   * This RPC sends a request to the annotation service to create a DataSet with the specified parameters.
   * The annotation service performs validation, and for a valid request, attempts to create the DataSet.
   * The response may indicate rejection, an error in handling the request, or successful handling of the request.
   */
  rpc createDataSet(CreateDataSetRequest) returns (CreateDataSetResponse);

  /*
   * queryDataSets: Unary (non-streaming) data sets query.
   *
   * This RPC returns information about DataSets matching the specified query parameters. Client sends a single
   * QueryDataSetsRequest and receives a single QueryDataSetsResponse. The response may indicate rejection,
   * error in handling, no data matching query, or otherwise contains the data matching the query specification.
   */
  rpc queryDataSets(QueryDataSetsRequest) returns (QueryDataSetsResponse);

  /*
   * createAnnotation: Add annotation to a DataSet.
   *
   * This RPC sends a request to the annotation service to create an annotation with the specified parameters.
   * The annotation service performs validation, and for a valid request, attempts to create the annotation.
   * The response may indicate rejection, an error in handling the request, or successful handling of the request.
   */
  rpc createAnnotation(CreateAnnotationRequest) returns (CreateAnnotationResponse);

  /*
   * queryAnnotations: Unary (non-streaming) annotations query.
   *
   * This RPC is used by clients to query over annotations added to ingested data.
   * Client sends a single QueryAnnotationsRequest with the query parameters, and receives a single
   * QueryAnnotationsResponse with the query results. The response may indicate rejection, error in handling,
   * no data matching query, or otherwise contains the data matching the query specification.
   */
  rpc queryAnnotations(QueryAnnotationsRequest) returns (QueryAnnotationsResponse);

}


//
// ------------------- DataSet Creation Request/Response ---------------------------
//

/*
 * Create DataSet Request.
 *
 * Contains a DataSet object to be created by the handler.
 */
message CreateDataSetRequest {
  DataSet dataSet = 1;
}

/*
 * Create DataSet Response.
 *
 * Contains response to createDataSet() API request.  Message payload is exceptionalResult if request is rejected or an
 * error is encountered by the handler, otherwise contains a CreateDataSetResult.
 */
message CreateDataSetResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Contains query result payload with either ExceptionalResult or SuccessfulResult as described above.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    CreateDataSetResult createDataSetResult = 11;
  }

  /*
   * Successful Result.
   *
   * Contains the results of a successful request to create a DataSet, with the id of the newly created DataSet.
   */
  message CreateDataSetResult {
    string dataSetId = 1;
  }
}


//
// ------------------- DataSet Query ---------------------------
//

/*
 * Query DataSet Request.
 *
 * Contains parameters for a query over existing DataSets.  A query includes a list of
 * (one or more) QueryDataSetsCriterion. OwnerCriterion, NameCriterion, and DescriptionCriterion are used to perform
 * queries over DataSet owner, name, and description, respectively.  The criterion can be used individually or combined
 * for compound queries.  E.g., a query request might use an OwnerCriterion and NameCriterion to find DataSets
 * for the specified owner matching the name filter.
 */
message QueryDataSetsRequest {

  repeated QueryDataSetsCriterion criteria = 1;

  message QueryDataSetsCriterion {

    oneof criterion {
      OwnerCriterion ownerCriterion = 10;
      NameCriterion nameCriterion = 11;
      DescriptionCriterion descriptionCriterion = 12;
    }

    /*
     * Criterion used to search dataset ownerId field.  "And" operator is used to combine with other criteria.
     */
    message OwnerCriterion {
      string ownerId = 1;
    }

    /*
     * Criterion used to search dataset description field.  "Or" operator is used to combine with other criteria.
     */
    message NameCriterion {
      string namePattern = 1;
    }

    /*
     * Criterion used to search dataset description field.  "Or" operator is used to combine with other criteria.
     */
    message DescriptionCriterion {
      string descriptionText = 1;
    }
  }
}

/*
 * Query DataSet Response.
 *
 * Contains the results of a DataSets query.  Payload is an ExceptionalResult if the request is invalid, an error is
 * encountered processing the query, or the query result is empty.  Otherwise payload is a DataSetsResult with a list
 * of DataSets matching the query parameters.
 */
message QueryDataSetsResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or DataSetsResult with query result.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    DataSetsResult dataSetsResult = 11;
  }

  /*
   * Datasets Query Result Content.
   *
   * Result contains a list of DataSet messages matching the query parameters.
   */
  message DataSetsResult {
    repeated DataSet dataSets = 1;
  }
}


//
// ------------------- Annotation Creation Request/Response ---------------------------
//

/*
 * Create Annotation Request.
 *
 * Contains details for adding an annotation to a DataSet with fields common to all requests for creating annotations,
 * plus details specific to each type of annotation that is supported (via annotation oneof field).
 */
message CreateAnnotationRequest {

  string ownerId = 1; // required annotation owner
  string dataSetId = 2;

  // annotation: Contains details specific to type of annotation being created.
  oneof annotation {
    CommentAnnotation commentAnnotation = 10;
  }
}

/*
 * Create Annotation Response.
 *
 * Contains details for response to request to add an annotation to a DataSet.  Response includes either
 * an ExceptionalResult describing a rejection or error situation, or a CreateAnnotationResult indicating the request
 * was handled successfully.
 */
message CreateAnnotationResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Contains query result payload with either ExceptionalResult or SuccessfulResult as described above.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    CreateAnnotationResult createAnnotationResult = 11;
  }

/*
 * Successful Annotation Result.
 *
 * Contains the results of a successful request to add an annotation to a DataSet, including the id for the newly
 * created annotation.
 */
  message CreateAnnotationResult {
    string annotationId = 1;
  }
}


//
// ------------------- Annotations Query ---------------------------
//

/*
 * Annotations Query Request.
 *
 * Contains a list of QueryAnnotationsCriterion for querying annotations. OwnerCriterion and CommentCriterion are used
 * to search by owner and comment text, respectively. List can include a single criterion, or multiple criterion for a
 * compound query. E.g., a query request might use an OwnerCriterion and CommentCriterion to find annotations
 * for the specified owner matching the comment filter.
 */
message QueryAnnotationsRequest {

  repeated QueryAnnotationsCriterion criteria = 1;

  message QueryAnnotationsCriterion {

    oneof criterion {
      OwnerCriterion ownerCriterion = 10;
      CommentCriterion commentCriterion = 11;
    }

    /*
     * Criterion used to search ownerId field of Annotations.  "And" operator is used to combine with other criteria.
     */
    message OwnerCriterion {
      string ownerId = 1;
    }

    /*
     * Criterion used to search over Comment Annotations.  "Or" operator is used to combine with other criteria.
     */
    message CommentCriterion {
      string commentText = 1;
    }
  }
}


/*
 * Annotations Query Response.
 *
 * Contains results from queryAnnotations() API request.  Message payload is either ExceptionalResult indicating
 * rejection, an error handling the request, or an empty query result, otherwise contains an AnnotationsResult with
 * the query results.
 */
message QueryAnnotationsResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or AnnotationsResult with query result.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    AnnotationsResult annotationsResult = 11;
  }

  /*
   * Annotations Query Result Content.
   *
   * Result contains a list of Annotation messages, one for each annotation matching the query parameters.
   */
  message AnnotationsResult {

    repeated Annotation annotations = 1;

    message Annotation {

      string annotationId = 1;
      string ownerId = 2;
      string dataSetId = 3;
      DataSet dataSet = 4;

      // annotation: Contains details specific to type of annotation.
      oneof annotation {
        CommentAnnotation commentAnnotation = 10;
      }
    }
  }
}


//
// ------------------- DataSet / DataBlock ---------------------------
//

/*
 * Mechanism for identifying a set of data within the archive.  This will be used to support other features
 * such as adding annotations to data sets or exporting data sets.
 *
 * A DataSet specifies archived data across multiple DataBlocks.  Each DataBlock specifies a time range and list of
 * data sources (columns/PVs).
 *
 */
message DataSet {
  string dataSetId = 1; // id for existing dataset, used in query results
  string name = 2; // required name
  string ownerId = 3; // required owner
  string description = 4; // optional textual description
  repeated DataBlock dataBlocks = 5; // required list of DataBlocks identifying data to include in DataSet.
}

message DataBlock {
  Timestamp beginTime = 1; // Required, specifies beginning of time range for basis set.
  Timestamp endTime = 2; // Required, specifies end of time range for basis set.
  repeated string pvNames = 3; // Required, contains list of data source names for basis set.
}


//
// ------------------- Annotation Types (common to creating and retrieving) ---------------------------
//

message CommentAnnotation {
  string	comment = 1;			// narrative comment text
}
