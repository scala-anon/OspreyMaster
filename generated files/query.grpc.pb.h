// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: query.proto
// Original file comments:
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
#ifndef GRPC_query_2eproto__INCLUDED
#define GRPC_query_2eproto__INCLUDED

#include "query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dp {
namespace service {
namespace query {

//
// ------------------- RPC Interfaces ---------------------------
//
//
//
// The Query Service Interface
//
// Defines RPC operations for data and metadata queries.
class DpQueryService final {
 public:
  static constexpr char const* service_full_name() {
    return "dp.service.query.DpQueryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // queryData: Unary (non-streaming) time series data query.
    //
    // Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
    // query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
    // contains the data matching the query specification.
    virtual ::grpc::Status queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::dp::service::query::QueryDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>> AsyncqueryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>>(AsyncqueryDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataRaw(context, request, cq));
    }
    //
    // queryDataStream: Server-side streaming time series data query.
    //
    // Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
    // messages with the query results. The response may indicate rejection, error in handling, no data matching query,
    // or otherwise contains the data matching the query specification.  Results are sent in the response stream until
    // the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
    //
    // The response stream is closed by the server in case of rejection, if there is an error in processing, or the
    // result cursor is exhausted.
    //
    // We expect this to be the best performing RPC for time series data query.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dp::service::query::QueryDataResponse>> queryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dp::service::query::QueryDataResponse>>(queryDataStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>> AsyncqueryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>>(AsyncqueryDataStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataStreamRaw(context, request, cq));
    }
    //
    // queryDataBidiStream: Bidirectional streaming time series data query.
    //
    // Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
    // with the query results.
    //
    // While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
    // message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
    // continue in a loop until the query result is exhausted.
    //
    // The server closes the response stream if a request is rejected, or when the result is exhausted or an error
    // is encountered.
    //
    // Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
    // contains the data matching the query specification.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> queryDataBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(queryDataBidiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> AsyncqueryDataBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(AsyncqueryDataBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryDataBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataBidiStreamRaw(context, cq));
    }
    //
    // queryTable: Unary (non-streaming) time series data query with tabular result.
    //
    // This time series data query returns its result in a tabular format, for use by the Data Platform web application.
    // The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
    // The response content may indicate an exception in handling such as rejection, database error, no data matching
    // query, or otherwise contains the tabular data matching the query specification.
    virtual ::grpc::Status queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::dp::service::query::QueryTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>> AsyncqueryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>>(AsyncqueryTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>> PrepareAsyncqueryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>>(PrepareAsyncqueryTableRaw(context, request, cq));
    }
    //
    // queryMetadata: Unary (non-streaming) metadata query.
    //
    // This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
    // a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
    // with the query results. The response may indicate rejection, error in handling, no data matching query, or
    // otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::dp::service::query::QueryMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>> AsyncqueryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>>(AsyncqueryMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>> PrepareAsyncqueryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>>(PrepareAsyncqueryMetadataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // queryData: Unary (non-streaming) time series data query.
      //
      // Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
      // query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
      // contains the data matching the query specification.
      virtual void queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // queryDataStream: Server-side streaming time series data query.
      //
      // Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
      // messages with the query results. The response may indicate rejection, error in handling, no data matching query,
      // or otherwise contains the data matching the query specification.  Results are sent in the response stream until
      // the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
      //
      // The response stream is closed by the server in case of rejection, if there is an error in processing, or the
      // result cursor is exhausted.
      //
      // We expect this to be the best performing RPC for time series data query.
      virtual void queryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::grpc::ClientReadReactor< ::dp::service::query::QueryDataResponse>* reactor) = 0;
      //
      // queryDataBidiStream: Bidirectional streaming time series data query.
      //
      // Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
      // with the query results.
      //
      // While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
      // message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
      // continue in a loop until the query result is exhausted.
      //
      // The server closes the response stream if a request is rejected, or when the result is exhausted or an error
      // is encountered.
      //
      // Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
      // contains the data matching the query specification.
      virtual void queryDataBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::dp::service::query::QueryDataRequest,::dp::service::query::QueryDataResponse>* reactor) = 0;
      //
      // queryTable: Unary (non-streaming) time series data query with tabular result.
      //
      // This time series data query returns its result in a tabular format, for use by the Data Platform web application.
      // The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
      // The response content may indicate an exception in handling such as rejection, database error, no data matching
      // query, or otherwise contains the tabular data matching the query specification.
      virtual void queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // queryMetadata: Unary (non-streaming) metadata query.
      //
      // This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
      // a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
      // with the query results. The response may indicate rejection, error in handling, no data matching query, or
      // otherwise contains the data matching the query specification.
      virtual void queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>* AsyncqueryDataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dp::service::query::QueryDataResponse>* queryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>* AsyncqueryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* queryDataBidiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* AsyncqueryDataBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>* AsyncqueryTableRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryTableResponse>* PrepareAsyncqueryTableRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>* AsyncqueryMetadataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::query::QueryMetadataResponse>* PrepareAsyncqueryMetadataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::dp::service::query::QueryDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>> AsyncqueryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>>(AsyncqueryDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dp::service::query::QueryDataResponse>> queryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dp::service::query::QueryDataResponse>>(queryDataStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>> AsyncqueryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>>(AsyncqueryDataStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> queryDataBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(queryDataBidiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> AsyncqueryDataBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(AsyncqueryDataBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>> PrepareAsyncqueryDataBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>>(PrepareAsyncqueryDataBidiStreamRaw(context, cq));
    }
    ::grpc::Status queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::dp::service::query::QueryTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>> AsyncqueryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>>(AsyncqueryTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>> PrepareAsyncqueryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>>(PrepareAsyncqueryTableRaw(context, request, cq));
    }
    ::grpc::Status queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::dp::service::query::QueryMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>> AsyncqueryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>>(AsyncqueryMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>> PrepareAsyncqueryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>>(PrepareAsyncqueryMetadataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response, std::function<void(::grpc::Status)>) override;
      void queryData(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void queryDataStream(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest* request, ::grpc::ClientReadReactor< ::dp::service::query::QueryDataResponse>* reactor) override;
      void queryDataBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::dp::service::query::QueryDataRequest,::dp::service::query::QueryDataResponse>* reactor) override;
      void queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response, std::function<void(::grpc::Status)>) override;
      void queryTable(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void queryMetadata(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>* AsyncqueryDataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dp::service::query::QueryDataResponse>* queryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>* AsyncqueryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataStreamRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* queryDataBidiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* AsyncqueryDataBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* PrepareAsyncqueryDataBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>* AsyncqueryTableRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryTableResponse>* PrepareAsyncqueryTableRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>* AsyncqueryMetadataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::query::QueryMetadataResponse>* PrepareAsyncqueryMetadataRaw(::grpc::ClientContext* context, const ::dp::service::query::QueryMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_queryData_;
    const ::grpc::internal::RpcMethod rpcmethod_queryDataStream_;
    const ::grpc::internal::RpcMethod rpcmethod_queryDataBidiStream_;
    const ::grpc::internal::RpcMethod rpcmethod_queryTable_;
    const ::grpc::internal::RpcMethod rpcmethod_queryMetadata_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // queryData: Unary (non-streaming) time series data query.
    //
    // Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
    // query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
    // contains the data matching the query specification.
    virtual ::grpc::Status queryData(::grpc::ServerContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response);
    //
    // queryDataStream: Server-side streaming time series data query.
    //
    // Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
    // messages with the query results. The response may indicate rejection, error in handling, no data matching query,
    // or otherwise contains the data matching the query specification.  Results are sent in the response stream until
    // the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
    //
    // The response stream is closed by the server in case of rejection, if there is an error in processing, or the
    // result cursor is exhausted.
    //
    // We expect this to be the best performing RPC for time series data query.
    virtual ::grpc::Status queryDataStream(::grpc::ServerContext* context, const ::dp::service::query::QueryDataRequest* request, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* writer);
    //
    // queryDataBidiStream: Bidirectional streaming time series data query.
    //
    // Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
    // with the query results.
    //
    // While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
    // message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
    // continue in a loop until the query result is exhausted.
    //
    // The server closes the response stream if a request is rejected, or when the result is exhausted or an error
    // is encountered.
    //
    // Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
    // contains the data matching the query specification.
    virtual ::grpc::Status queryDataBidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* stream);
    //
    // queryTable: Unary (non-streaming) time series data query with tabular result.
    //
    // This time series data query returns its result in a tabular format, for use by the Data Platform web application.
    // The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
    // The response content may indicate an exception in handling such as rejection, database error, no data matching
    // query, or otherwise contains the tabular data matching the query specification.
    virtual ::grpc::Status queryTable(::grpc::ServerContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response);
    //
    // queryMetadata: Unary (non-streaming) metadata query.
    //
    // This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
    // a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
    // with the query results. The response may indicate rejection, error in handling, no data matching query, or
    // otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryMetadata(::grpc::ServerContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryData(::grpc::ServerContext* context, ::dp::service::query::QueryDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::query::QueryDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryDataStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataStream(::grpc::ServerContext* context, ::dp::service::query::QueryDataRequest* request, ::grpc::ServerAsyncWriter< ::dp::service::query::QueryDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryDataBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryDataBidiStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_queryDataBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryTable() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryTable(::grpc::ServerContext* context, ::dp::service::query::QueryTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::query::QueryTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryMetadata(::grpc::ServerContext* context, ::dp::service::query::QueryMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::query::QueryMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_queryData<WithAsyncMethod_queryDataStream<WithAsyncMethod_queryDataBidiStream<WithAsyncMethod_queryTable<WithAsyncMethod_queryMetadata<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::query::QueryDataRequest* request, ::dp::service::query::QueryDataResponse* response) { return this->queryData(context, request, response); }));}
    void SetMessageAllocatorFor_queryData(
        ::grpc::MessageAllocator< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryData(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryDataStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::query::QueryDataRequest* request) { return this->queryDataStream(context, request); }));
    }
    ~WithCallbackMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::dp::service::query::QueryDataResponse>* queryDataStream(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryDataBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryDataBidiStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->queryDataBidiStream(context); }));
    }
    ~WithCallbackMethod_queryDataBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* queryDataBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryTable() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryTableRequest, ::dp::service::query::QueryTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::query::QueryTableRequest* request, ::dp::service::query::QueryTableResponse* response) { return this->queryTable(context, request, response); }));}
    void SetMessageAllocatorFor_queryTable(
        ::grpc::MessageAllocator< ::dp::service::query::QueryTableRequest, ::dp::service::query::QueryTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryTableRequest, ::dp::service::query::QueryTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryTable(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryMetadata() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryMetadataRequest, ::dp::service::query::QueryMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::query::QueryMetadataRequest* request, ::dp::service::query::QueryMetadataResponse* response) { return this->queryMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_queryMetadata(
        ::grpc::MessageAllocator< ::dp::service::query::QueryMetadataRequest, ::dp::service::query::QueryMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::query::QueryMetadataRequest, ::dp::service::query::QueryMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_queryData<WithCallbackMethod_queryDataStream<WithCallbackMethod_queryDataBidiStream<WithCallbackMethod_queryTable<WithCallbackMethod_queryMetadata<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryDataStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryDataBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryDataBidiStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_queryDataBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryTable() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryDataStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryDataBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryDataBidiStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_queryDataBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryTable() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryMetadata() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryData(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryDataStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->queryDataStream(context, request); }));
    }
    ~WithRawCallbackMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* queryDataStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryDataBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryDataBidiStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->queryDataBidiStream(context); }));
    }
    ~WithRawCallbackMethod_queryDataBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::query::QueryDataResponse, ::dp::service::query::QueryDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* queryDataBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryTable() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryMetadata() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* streamer) {
                       return this->StreamedqueryData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryData(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::dp::service::query::QueryDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::query::QueryDataRequest,::dp::service::query::QueryDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryTable() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::query::QueryTableRequest, ::dp::service::query::QueryTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::query::QueryTableRequest, ::dp::service::query::QueryTableResponse>* streamer) {
                       return this->StreamedqueryTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryTable(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryTableRequest* /*request*/, ::dp::service::query::QueryTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::query::QueryTableRequest,::dp::service::query::QueryTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::query::QueryMetadataRequest, ::dp::service::query::QueryMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::query::QueryMetadataRequest, ::dp::service::query::QueryMetadataResponse>* streamer) {
                       return this->StreamedqueryMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryMetadata(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryMetadataRequest* /*request*/, ::dp::service::query::QueryMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::query::QueryMetadataRequest,::dp::service::query::QueryMetadataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_queryData<WithStreamedUnaryMethod_queryTable<WithStreamedUnaryMethod_queryMetadata<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_queryDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_queryDataStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::dp::service::query::QueryDataRequest, ::dp::service::query::QueryDataResponse>* streamer) {
                       return this->StreamedqueryDataStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_queryDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryDataStream(::grpc::ServerContext* /*context*/, const ::dp::service::query::QueryDataRequest* /*request*/, ::grpc::ServerWriter< ::dp::service::query::QueryDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedqueryDataStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dp::service::query::QueryDataRequest,::dp::service::query::QueryDataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_queryDataStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_queryData<WithSplitStreamingMethod_queryDataStream<WithStreamedUnaryMethod_queryTable<WithStreamedUnaryMethod_queryMetadata<Service > > > > StreamedService;
};

}  // namespace query
}  // namespace service
}  // namespace dp


#endif  // GRPC_query_2eproto__INCLUDED
