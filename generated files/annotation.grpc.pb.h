// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: annotation.proto
// Original file comments:
//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.
//
#ifndef GRPC_annotation_2eproto__INCLUDED
#define GRPC_annotation_2eproto__INCLUDED

#include "annotation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dp {
namespace service {
namespace annotation {

//
// ------------------- RPC Interfaces ---------------------------
//
//
//
// Annotation Service Interface
//
// Interface for annotating archived data.
class DpAnnotationService final {
 public:
  static constexpr char const* service_full_name() {
    return "dp.service.annotation.DpAnnotationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // createDataSet: Create a DataSet.
    //
    // This RPC sends a request to the annotation service to create a DataSet with the specified parameters.
    // The annotation service performs validation, and for a valid request, attempts to create the DataSet.
    // The response may indicate rejection, an error in handling the request, or successful handling of the request.
    virtual ::grpc::Status createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::dp::service::annotation::CreateDataSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>> AsynccreateDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>>(AsynccreateDataSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>> PrepareAsynccreateDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>>(PrepareAsynccreateDataSetRaw(context, request, cq));
    }
    //
    // queryDataSets: Unary (non-streaming) data sets query.
    //
    // This RPC returns information about DataSets matching the specified query parameters. Client sends a single
    // QueryDataSetsRequest and receives a single QueryDataSetsResponse. The response may indicate rejection,
    // error in handling, no data matching query, or otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::dp::service::annotation::QueryDataSetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>> AsyncqueryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>>(AsyncqueryDataSetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>> PrepareAsyncqueryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>>(PrepareAsyncqueryDataSetsRaw(context, request, cq));
    }
    //
    // createAnnotation: Add annotation to a DataSet.
    //
    // This RPC sends a request to the annotation service to create an annotation with the specified parameters.
    // The annotation service performs validation, and for a valid request, attempts to create the annotation.
    // The response may indicate rejection, an error in handling the request, or successful handling of the request.
    virtual ::grpc::Status createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::dp::service::annotation::CreateAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>> AsynccreateAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>>(AsynccreateAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>> PrepareAsynccreateAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>>(PrepareAsynccreateAnnotationRaw(context, request, cq));
    }
    //
    // queryAnnotations: Unary (non-streaming) annotations query.
    //
    // This RPC is used by clients to query over annotations added to ingested data.
    // Client sends a single QueryAnnotationsRequest with the query parameters, and receives a single
    // QueryAnnotationsResponse with the query results. The response may indicate rejection, error in handling,
    // no data matching query, or otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::dp::service::annotation::QueryAnnotationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>> AsyncqueryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>>(AsyncqueryAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>> PrepareAsyncqueryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>>(PrepareAsyncqueryAnnotationsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // createDataSet: Create a DataSet.
      //
      // This RPC sends a request to the annotation service to create a DataSet with the specified parameters.
      // The annotation service performs validation, and for a valid request, attempts to create the DataSet.
      // The response may indicate rejection, an error in handling the request, or successful handling of the request.
      virtual void createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // queryDataSets: Unary (non-streaming) data sets query.
      //
      // This RPC returns information about DataSets matching the specified query parameters. Client sends a single
      // QueryDataSetsRequest and receives a single QueryDataSetsResponse. The response may indicate rejection,
      // error in handling, no data matching query, or otherwise contains the data matching the query specification.
      virtual void queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // createAnnotation: Add annotation to a DataSet.
      //
      // This RPC sends a request to the annotation service to create an annotation with the specified parameters.
      // The annotation service performs validation, and for a valid request, attempts to create the annotation.
      // The response may indicate rejection, an error in handling the request, or successful handling of the request.
      virtual void createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // queryAnnotations: Unary (non-streaming) annotations query.
      //
      // This RPC is used by clients to query over annotations added to ingested data.
      // Client sends a single QueryAnnotationsRequest with the query parameters, and receives a single
      // QueryAnnotationsResponse with the query results. The response may indicate rejection, error in handling,
      // no data matching query, or otherwise contains the data matching the query specification.
      virtual void queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>* AsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateDataSetResponse>* PrepareAsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>* AsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryDataSetsResponse>* PrepareAsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>* AsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::CreateAnnotationResponse>* PrepareAsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>* AsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::annotation::QueryAnnotationsResponse>* PrepareAsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::dp::service::annotation::CreateDataSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>> AsynccreateDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>>(AsynccreateDataSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>> PrepareAsynccreateDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>>(PrepareAsynccreateDataSetRaw(context, request, cq));
    }
    ::grpc::Status queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::dp::service::annotation::QueryDataSetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>> AsyncqueryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>>(AsyncqueryDataSetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>> PrepareAsyncqueryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>>(PrepareAsyncqueryDataSetsRaw(context, request, cq));
    }
    ::grpc::Status createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::dp::service::annotation::CreateAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>> AsynccreateAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>>(AsynccreateAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>> PrepareAsynccreateAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>>(PrepareAsynccreateAnnotationRaw(context, request, cq));
    }
    ::grpc::Status queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::dp::service::annotation::QueryAnnotationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>> AsyncqueryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>>(AsyncqueryAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>> PrepareAsyncqueryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>>(PrepareAsyncqueryAnnotationsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, std::function<void(::grpc::Status)>) override;
      void createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, std::function<void(::grpc::Status)>) override;
      void queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, std::function<void(::grpc::Status)>) override;
      void queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>* AsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>* PrepareAsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>* AsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>* PrepareAsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>* AsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>* PrepareAsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>* AsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>* PrepareAsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createDataSet_;
    const ::grpc::internal::RpcMethod rpcmethod_queryDataSets_;
    const ::grpc::internal::RpcMethod rpcmethod_createAnnotation_;
    const ::grpc::internal::RpcMethod rpcmethod_queryAnnotations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // createDataSet: Create a DataSet.
    //
    // This RPC sends a request to the annotation service to create a DataSet with the specified parameters.
    // The annotation service performs validation, and for a valid request, attempts to create the DataSet.
    // The response may indicate rejection, an error in handling the request, or successful handling of the request.
    virtual ::grpc::Status createDataSet(::grpc::ServerContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response);
    //
    // queryDataSets: Unary (non-streaming) data sets query.
    //
    // This RPC returns information about DataSets matching the specified query parameters. Client sends a single
    // QueryDataSetsRequest and receives a single QueryDataSetsResponse. The response may indicate rejection,
    // error in handling, no data matching query, or otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryDataSets(::grpc::ServerContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response);
    //
    // createAnnotation: Add annotation to a DataSet.
    //
    // This RPC sends a request to the annotation service to create an annotation with the specified parameters.
    // The annotation service performs validation, and for a valid request, attempts to create the annotation.
    // The response may indicate rejection, an error in handling the request, or successful handling of the request.
    virtual ::grpc::Status createAnnotation(::grpc::ServerContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response);
    //
    // queryAnnotations: Unary (non-streaming) annotations query.
    //
    // This RPC is used by clients to query over annotations added to ingested data.
    // Client sends a single QueryAnnotationsRequest with the query parameters, and receives a single
    // QueryAnnotationsResponse with the query results. The response may indicate rejection, error in handling,
    // no data matching query, or otherwise contains the data matching the query specification.
    virtual ::grpc::Status queryAnnotations(::grpc::ServerContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createDataSet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDataSet(::grpc::ServerContext* context, ::dp::service::annotation::CreateDataSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::annotation::CreateDataSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryDataSets() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataSets(::grpc::ServerContext* context, ::dp::service::annotation::QueryDataSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::annotation::QueryDataSetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createAnnotation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateAnnotation(::grpc::ServerContext* context, ::dp::service::annotation::CreateAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::annotation::CreateAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryAnnotations(::grpc::ServerContext* context, ::dp::service::annotation::QueryAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::annotation::QueryAnnotationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createDataSet<WithAsyncMethod_queryDataSets<WithAsyncMethod_createAnnotation<WithAsyncMethod_queryAnnotations<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createDataSet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response) { return this->createDataSet(context, request, response); }));}
    void SetMessageAllocatorFor_createDataSet(
        ::grpc::MessageAllocator< ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createDataSet(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryDataSets() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response) { return this->queryDataSets(context, request, response); }));}
    void SetMessageAllocatorFor_queryDataSets(
        ::grpc::MessageAllocator< ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryDataSets(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createAnnotation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response) { return this->createAnnotation(context, request, response); }));}
    void SetMessageAllocatorFor_createAnnotation(
        ::grpc::MessageAllocator< ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response) { return this->queryAnnotations(context, request, response); }));}
    void SetMessageAllocatorFor_queryAnnotations(
        ::grpc::MessageAllocator< ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createDataSet<WithCallbackMethod_queryDataSets<WithCallbackMethod_createAnnotation<WithCallbackMethod_queryAnnotations<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createDataSet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryDataSets() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createAnnotation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createDataSet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDataSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryDataSets() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryDataSets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createAnnotation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateAnnotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestqueryAnnotations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createDataSet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createDataSet(context, request, response); }));
    }
    ~WithRawCallbackMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createDataSet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryDataSets() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryDataSets(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryDataSets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createAnnotation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createAnnotation(context, request, response); }));
    }
    ~WithRawCallbackMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->queryAnnotations(context, request, response); }));
    }
    ~WithRawCallbackMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* queryAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createDataSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createDataSet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse>* streamer) {
                       return this->StreamedcreateDataSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createDataSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createDataSet(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateDataSetRequest* /*request*/, ::dp::service::annotation::CreateDataSetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateDataSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::annotation::CreateDataSetRequest,::dp::service::annotation::CreateDataSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryDataSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryDataSets() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse>* streamer) {
                       return this->StreamedqueryDataSets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryDataSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryDataSets(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryDataSetsRequest* /*request*/, ::dp::service::annotation::QueryDataSetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryDataSets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::annotation::QueryDataSetsRequest,::dp::service::annotation::QueryDataSetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createAnnotation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse>* streamer) {
                       return this->StreamedcreateAnnotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createAnnotation(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::CreateAnnotationRequest* /*request*/, ::dp::service::annotation::CreateAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::annotation::CreateAnnotationRequest,::dp::service::annotation::CreateAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_queryAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_queryAnnotations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse>* streamer) {
                       return this->StreamedqueryAnnotations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_queryAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status queryAnnotations(::grpc::ServerContext* /*context*/, const ::dp::service::annotation::QueryAnnotationsRequest* /*request*/, ::dp::service::annotation::QueryAnnotationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedqueryAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::annotation::QueryAnnotationsRequest,::dp::service::annotation::QueryAnnotationsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createDataSet<WithStreamedUnaryMethod_queryDataSets<WithStreamedUnaryMethod_createAnnotation<WithStreamedUnaryMethod_queryAnnotations<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createDataSet<WithStreamedUnaryMethod_queryDataSets<WithStreamedUnaryMethod_createAnnotation<WithStreamedUnaryMethod_queryAnnotations<Service > > > > StreamedService;
};

}  // namespace annotation
}  // namespace service
}  // namespace dp


#endif  // GRPC_annotation_2eproto__INCLUDED
