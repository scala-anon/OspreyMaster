// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: annotation.proto

#include "annotation.pb.h"
#include "annotation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dp {
namespace service {
namespace annotation {

static const char* DpAnnotationService_method_names[] = {
  "/dp.service.annotation.DpAnnotationService/createDataSet",
  "/dp.service.annotation.DpAnnotationService/queryDataSets",
  "/dp.service.annotation.DpAnnotationService/createAnnotation",
  "/dp.service.annotation.DpAnnotationService/queryAnnotations",
};

std::unique_ptr< DpAnnotationService::Stub> DpAnnotationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DpAnnotationService::Stub> stub(new DpAnnotationService::Stub(channel, options));
  return stub;
}

DpAnnotationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createDataSet_(DpAnnotationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryDataSets_(DpAnnotationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createAnnotation_(DpAnnotationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryAnnotations_(DpAnnotationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DpAnnotationService::Stub::createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::dp::service::annotation::CreateDataSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createDataSet_, context, request, response);
}

void DpAnnotationService::Stub::async::createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createDataSet_, context, request, response, std::move(f));
}

void DpAnnotationService::Stub::async::createDataSet(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createDataSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>* DpAnnotationService::Stub::PrepareAsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dp::service::annotation::CreateDataSetResponse, ::dp::service::annotation::CreateDataSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createDataSet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateDataSetResponse>* DpAnnotationService::Stub::AsynccreateDataSetRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateDataSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateDataSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DpAnnotationService::Stub::queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::dp::service::annotation::QueryDataSetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryDataSets_, context, request, response);
}

void DpAnnotationService::Stub::async::queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryDataSets_, context, request, response, std::move(f));
}

void DpAnnotationService::Stub::async::queryDataSets(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryDataSets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>* DpAnnotationService::Stub::PrepareAsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dp::service::annotation::QueryDataSetsResponse, ::dp::service::annotation::QueryDataSetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryDataSets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryDataSetsResponse>* DpAnnotationService::Stub::AsyncqueryDataSetsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryDataSetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryDataSetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DpAnnotationService::Stub::createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::dp::service::annotation::CreateAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createAnnotation_, context, request, response);
}

void DpAnnotationService::Stub::async::createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createAnnotation_, context, request, response, std::move(f));
}

void DpAnnotationService::Stub::async::createAnnotation(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createAnnotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>* DpAnnotationService::Stub::PrepareAsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dp::service::annotation::CreateAnnotationResponse, ::dp::service::annotation::CreateAnnotationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createAnnotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::CreateAnnotationResponse>* DpAnnotationService::Stub::AsynccreateAnnotationRaw(::grpc::ClientContext* context, const ::dp::service::annotation::CreateAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateAnnotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DpAnnotationService::Stub::queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::dp::service::annotation::QueryAnnotationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryAnnotations_, context, request, response);
}

void DpAnnotationService::Stub::async::queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryAnnotations_, context, request, response, std::move(f));
}

void DpAnnotationService::Stub::async::queryAnnotations(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryAnnotations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>* DpAnnotationService::Stub::PrepareAsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dp::service::annotation::QueryAnnotationsResponse, ::dp::service::annotation::QueryAnnotationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryAnnotations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dp::service::annotation::QueryAnnotationsResponse>* DpAnnotationService::Stub::AsyncqueryAnnotationsRaw(::grpc::ClientContext* context, const ::dp::service::annotation::QueryAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryAnnotationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

DpAnnotationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DpAnnotationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DpAnnotationService::Service, ::dp::service::annotation::CreateDataSetRequest, ::dp::service::annotation::CreateDataSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DpAnnotationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dp::service::annotation::CreateDataSetRequest* req,
             ::dp::service::annotation::CreateDataSetResponse* resp) {
               return service->createDataSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DpAnnotationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DpAnnotationService::Service, ::dp::service::annotation::QueryDataSetsRequest, ::dp::service::annotation::QueryDataSetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DpAnnotationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dp::service::annotation::QueryDataSetsRequest* req,
             ::dp::service::annotation::QueryDataSetsResponse* resp) {
               return service->queryDataSets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DpAnnotationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DpAnnotationService::Service, ::dp::service::annotation::CreateAnnotationRequest, ::dp::service::annotation::CreateAnnotationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DpAnnotationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dp::service::annotation::CreateAnnotationRequest* req,
             ::dp::service::annotation::CreateAnnotationResponse* resp) {
               return service->createAnnotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DpAnnotationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DpAnnotationService::Service, ::dp::service::annotation::QueryAnnotationsRequest, ::dp::service::annotation::QueryAnnotationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DpAnnotationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dp::service::annotation::QueryAnnotationsRequest* req,
             ::dp::service::annotation::QueryAnnotationsResponse* resp) {
               return service->queryAnnotations(ctx, req, resp);
             }, this)));
}

DpAnnotationService::Service::~Service() {
}

::grpc::Status DpAnnotationService::Service::createDataSet(::grpc::ServerContext* context, const ::dp::service::annotation::CreateDataSetRequest* request, ::dp::service::annotation::CreateDataSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DpAnnotationService::Service::queryDataSets(::grpc::ServerContext* context, const ::dp::service::annotation::QueryDataSetsRequest* request, ::dp::service::annotation::QueryDataSetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DpAnnotationService::Service::createAnnotation(::grpc::ServerContext* context, const ::dp::service::annotation::CreateAnnotationRequest* request, ::dp::service::annotation::CreateAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DpAnnotationService::Service::queryAnnotations(::grpc::ServerContext* context, const ::dp::service::annotation::QueryAnnotationsRequest* request, ::dp::service::annotation::QueryAnnotationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dp
}  // namespace service
}  // namespace annotation

